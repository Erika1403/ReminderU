from flask import Flask, request, make_response, jsonify
from supabase import Client, create_client
from os import environ
import json
import recommendation as rec
import categorization as cg
from datetime import datetime as dt


app = Flask(__name__)
db_url = environ.get("DATABASE_URL")
db_key = environ.get("DATABASE_KEY")
supabase: Client = create_client(db_url, db_key)

time_format = "%H:%M:%S"
date_format = "%Y-%m-%d"
#############################################################
# FOR TESTING ONLY!!! 

# for signing up, for new users
# {
#   "user_name": "your name", 
#   "user_password": "your password",
#   "user_email": "your email"
# }
# Should create function for validations
@app.route('/sign-up', methods=["POST"])
def sign_up():
    sdata = request.get_json()
    email = sdata["user_email"]
    password = sdata["user_password"]
    # name = sdata["user_name"]
    user = supabase.auth.sign_up({ "email": email, "password": password })
    print(user)
    return{"message": "Done signing up!"}, 201

# for signing in,
# {
#   "user_name": "your name", 
#   "user_password": "your password",
#   "user_email": "your email"
# }
# if successfully logged in, json file should be save to device while in sessionm for further use
# Should create function for validations
# just put code for Signing In, Up, and OUT on REACT NATIVE
@app.route('/sign-in', methods=["POST"])
def sign_in():
    try:
        data = request.get_json()
        response = supabase.auth.sign_in_with_password({ "email": data["user_email"], "password": data["user_password"] })
        user_id = response.user.id
        token = response.session.access_token
        return {
            "user_id": user_id,
            "access_token": token
        }, 200
    except Exception as e :
        return {"message": f"An error occurred: {e}"}, 500

# for signing out, 
# {
#   "user_name": "your name", 
#   "user_password": "your password",
#   "user_email": "your email",
#   "access_token": "your token"
# }    
@app.route("/sign-out", methods=["POST"])
def sign_out():
    supabase.auth.sign_out()

##################################################################
# Working normally
# user id will be sent when accessing endpoint
@app.route('/get_schedule/<string:user_id>', methods=["GET"])
def get_schedule(user_id):
    try:
        data = supabase.table("Schedule").select("Event, Date, Start Time, End Time, Location, Category").eq("user_id", user_id).execute()
        if data:
            return jsonify(data.data)
        else:
            return jsonify({"error": "Schedule not found"}), 404
    except Exception as e:  # Catch other general exceptions
        # Handle unexpected errors
        return jsonify({"error": f"Unexpected error: {str(e)}"}), 500

# input are 2 json objects, named schedule_records and new_schedule
# Working Normally
# if schedule is available, add schedule, else talk to user
@app.route('/check_availability', methods=["POST"])
def check_availability():
    try:
        data = request.get_json()
        if data and 'schedule_records' in data and 'new_schedule' in data:
            schedule_records = json.dumps(data['schedule_records'])
            new_schedule = data['new_schedule']
            
            result = rec.recommend(file=schedule_records, user_data=new_schedule)
            print(result)
            return result, 200
    except Exception as e:
        return jsonify({"error": f"Unexpected error: {str(e)}"}), 500
    
    

# for adding/updating/deleting schedule
# Sample Data 
"""
{
        "Location": "Japan",
        "Date": "2024-07-21",
        "Event": "Trip to Japan",
        "End Time": "16:00:00",
        "Start Time": "14:00:00",
        "Status":"Pending",
        "user_id": ""
}
"""
@app.route('/add_schedule/<string:user_id>', methods=["POST"])
def add_schedule(user_id):
    try:
        data = request.get_json()
        sched_name = data["Event"]
        start = data["Start Time"]
        end = data["End Time"]
        date = data["Date"]
        loc = data["Location"]
        category = cg.predict_category(sched_name)[0]
        data = supabase.table('Schedule').insert({
            "Date": date, 
            "Start Time": start,
            "End Time": end,
            "Location": loc,
            "Event": sched_name,
            "Category": category,
            "user_id":  user_id,
            "Status": "Pending"
            }).execute()
        if data:
            return jsonify({"message": "Schedule added successfully!"}), 200
        else:
            return jsonify({"error": "An error occured while adding schedule."}), 500
    except Exception as e:
         return jsonify({"error": f"Unexpected error: {str(e)}"}), 500

"""
Sample Data
{
	"initial": {
				"Location": "Japan",
        "Date": "2024-04-21",
        "Event": "Trip to Japan",
        "End Time": "16:00:00",
        "Start Time": "14:00:00"
	}, 
	"new":{
		"Location": "Japan",
        "Date": "2024-07-24",
        "Event": "Trip to Japan",
        "End Time": "09:00:00",
        "Start Time": "06:00:00"
	}
}
"""
def get_sched_id(u_id, data):
    id = supabase.table("Schedule").select("sched_id").eq("user_id", u_id)\
        .eq("Date", data["Date"])\
        .eq("Event", data["Event"])\
        .eq("Start Time", data["Start Time"])\
        .eq("End Time", data["End Time"]).execute()
    
    sched_id = id.data[0]['sched_id']
    return sched_id


@app.route('/update_schedule/<string:user_id>', methods=['PUT'])
def update_schedule(user_id):
    try:
        data = request.get_json()
        init_data = data.get("initial")
        sched_id = get_sched_id(user_id, init_data)
        new_data = data.get("new")
        data = supabase.table("Schedule").update({
            "Date": new_data["Date"], 
            "Start Time": new_data["Start Time"],
            "End Time": new_data["End Time"], 
            "Location": new_data["Location"]
            }).eq("sched_id", sched_id).execute()
        if data:
            return jsonify({"message": "Schedule updated successfully!"}), 200
        else:
            return jsonify({"erro": "An error occure while updating schedule."}), 500
    except Exception as e:
        return jsonify({"error": f"Unexpected error: {str(e)}"}), 500

"""
Sample Data

""" 
    
@app.route('/delete_schedule/<string:user_id>', methods=['DELETE'])
def delete_schedule(user_id):
    try:
        data = request.get_json()
        sched_id = get_sched_id(user_id, data)
        response = supabase.table("Schedule").delete().eq("sched_id", sched_id).execute()
        if response:
            return jsonify({"message": "Schedule deleted successfully!"}), 200
        else:
            return jsonify({"message": "An error occured while deleting schedule."}), 500
    except Exception as e:
        return jsonify({"error": f"Unexpected error: {str(e)}"}), 500

@app.route('/chat_with_belle', methods=["POST"])
def  chat_with_belle():
    # implement nlp model and return response
    data = request.get_json()
    message = data.get("message")
    return jsonify({"response": "Sure!, I am glad to help"})


if __name__ == '__main__':
    app.run(debug=True)